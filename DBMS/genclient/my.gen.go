// Package genclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package genclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDatabases request
	GetDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabases request with any body
	PostDatabasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatabases(ctx context.Context, body PostDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabasesDbName request
	DeleteDatabasesDbName(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabasesDbName request
	GetDatabasesDbName(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabasesDbName request with any body
	PostDatabasesDbNameWithBody(ctx context.Context, dbName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatabasesDbName(ctx context.Context, dbName string, body PostDatabasesDbNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabasesDbNameJoinTables request
	GetDatabasesDbNameJoinTables(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabasesDbNameJoinedTables request
	GetDatabasesDbNameJoinedTables(ctx context.Context, dbName string, params *GetDatabasesDbNameJoinedTablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabasesDbNameTableName request
	DeleteDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabasesDbNameTableName request
	GetDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDatabasesDbNameTableName request with any body
	PostDatabasesDbNameTableNameWithBody(ctx context.Context, dbName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, body PostDatabasesDbNameTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabasesDbNameTableNameRowId request
	DeleteDatabasesDbNameTableNameRowId(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDatabasesDbNameTableNameRowId request
	PutDatabasesDbNameTableNameRowId(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDatabases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabases(ctx context.Context, body PostDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabasesDbName(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabasesDbNameRequest(c.Server, dbName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabasesDbName(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesDbNameRequest(c.Server, dbName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabasesDbNameWithBody(ctx context.Context, dbName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesDbNameRequestWithBody(c.Server, dbName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabasesDbName(ctx context.Context, dbName string, body PostDatabasesDbNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesDbNameRequest(c.Server, dbName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabasesDbNameJoinTables(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesDbNameJoinTablesRequest(c.Server, dbName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabasesDbNameJoinedTables(ctx context.Context, dbName string, params *GetDatabasesDbNameJoinedTablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesDbNameJoinedTablesRequest(c.Server, dbName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabasesDbNameTableNameRequest(c.Server, dbName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesDbNameTableNameRequest(c.Server, dbName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabasesDbNameTableNameWithBody(ctx context.Context, dbName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesDbNameTableNameRequestWithBody(c.Server, dbName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDatabasesDbNameTableName(ctx context.Context, dbName string, tableName string, body PostDatabasesDbNameTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDatabasesDbNameTableNameRequest(c.Server, dbName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabasesDbNameTableNameRowId(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabasesDbNameTableNameRowIdRequest(c.Server, dbName, tableName, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDatabasesDbNameTableNameRowId(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDatabasesDbNameTableNameRowIdRequest(c.Server, dbName, tableName, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDatabasesRequest generates requests for GetDatabases
func NewGetDatabasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabasesRequest calls the generic PostDatabases builder with application/json body
func NewPostDatabasesRequest(server string, body PostDatabasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatabasesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDatabasesRequestWithBody generates requests for PostDatabases with any type of body
func NewPostDatabasesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabasesDbNameRequest generates requests for DeleteDatabasesDbName
func NewDeleteDatabasesDbNameRequest(server string, dbName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabasesDbNameRequest generates requests for GetDatabasesDbName
func NewGetDatabasesDbNameRequest(server string, dbName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabasesDbNameRequest calls the generic PostDatabasesDbName builder with application/json body
func NewPostDatabasesDbNameRequest(server string, dbName string, body PostDatabasesDbNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatabasesDbNameRequestWithBody(server, dbName, "application/json", bodyReader)
}

// NewPostDatabasesDbNameRequestWithBody generates requests for PostDatabasesDbName with any type of body
func NewPostDatabasesDbNameRequestWithBody(server string, dbName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatabasesDbNameJoinTablesRequest generates requests for GetDatabasesDbNameJoinTables
func NewGetDatabasesDbNameJoinTablesRequest(server string, dbName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/join_tables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabasesDbNameJoinedTablesRequest generates requests for GetDatabasesDbNameJoinedTables
func NewGetDatabasesDbNameJoinedTablesRequest(server string, dbName string, params *GetDatabasesDbNameJoinedTablesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/joined_tables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.T1 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t1", runtime.ParamLocationQuery, *params.T1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.T2 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t2", runtime.ParamLocationQuery, *params.T2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.C1 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "c1", runtime.ParamLocationQuery, *params.C1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.C2 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "c2", runtime.ParamLocationQuery, *params.C2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDatabasesDbNameTableNameRequest generates requests for DeleteDatabasesDbNameTableName
func NewDeleteDatabasesDbNameTableNameRequest(server string, dbName string, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabasesDbNameTableNameRequest generates requests for GetDatabasesDbNameTableName
func NewGetDatabasesDbNameTableNameRequest(server string, dbName string, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDatabasesDbNameTableNameRequest calls the generic PostDatabasesDbNameTableName builder with application/json body
func NewPostDatabasesDbNameTableNameRequest(server string, dbName string, tableName string, body PostDatabasesDbNameTableNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDatabasesDbNameTableNameRequestWithBody(server, dbName, tableName, "application/json", bodyReader)
}

// NewPostDatabasesDbNameTableNameRequestWithBody generates requests for PostDatabasesDbNameTableName with any type of body
func NewPostDatabasesDbNameTableNameRequestWithBody(server string, dbName string, tableName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabasesDbNameTableNameRowIdRequest generates requests for DeleteDatabasesDbNameTableNameRowId
func NewDeleteDatabasesDbNameTableNameRowIdRequest(server string, dbName string, tableName string, rowId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDatabasesDbNameTableNameRowIdRequest generates requests for PutDatabasesDbNameTableNameRowId
func NewPutDatabasesDbNameTableNameRowIdRequest(server string, dbName string, tableName string, rowId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "db_name", runtime.ParamLocationPath, dbName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "table_name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "row_id", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/databases/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDatabases request
	GetDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDatabasesResponse, error)

	// PostDatabases request with any body
	PostDatabasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesResponse, error)

	PostDatabasesWithResponse(ctx context.Context, body PostDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesResponse, error)

	// DeleteDatabasesDbName request
	DeleteDatabasesDbNameWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameResponse, error)

	// GetDatabasesDbName request
	GetDatabasesDbNameWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameResponse, error)

	// PostDatabasesDbName request with any body
	PostDatabasesDbNameWithBodyWithResponse(ctx context.Context, dbName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameResponse, error)

	PostDatabasesDbNameWithResponse(ctx context.Context, dbName string, body PostDatabasesDbNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameResponse, error)

	// GetDatabasesDbNameJoinTables request
	GetDatabasesDbNameJoinTablesWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameJoinTablesResponse, error)

	// GetDatabasesDbNameJoinedTables request
	GetDatabasesDbNameJoinedTablesWithResponse(ctx context.Context, dbName string, params *GetDatabasesDbNameJoinedTablesParams, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameJoinedTablesResponse, error)

	// DeleteDatabasesDbNameTableName request
	DeleteDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameTableNameResponse, error)

	// GetDatabasesDbNameTableName request
	GetDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameTableNameResponse, error)

	// PostDatabasesDbNameTableName request with any body
	PostDatabasesDbNameTableNameWithBodyWithResponse(ctx context.Context, dbName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameTableNameResponse, error)

	PostDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, body PostDatabasesDbNameTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameTableNameResponse, error)

	// DeleteDatabasesDbNameTableNameRowId request
	DeleteDatabasesDbNameTableNameRowIdWithResponse(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameTableNameRowIdResponse, error)

	// PutDatabasesDbNameTableNameRowId request
	PutDatabasesDbNameTableNameRowIdWithResponse(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*PutDatabasesDbNameTableNameRowIdResponse, error)
}

type GetDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabasesDbNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabasesDbNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabasesDbNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabasesDbNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesDbNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesDbNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabasesDbNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostDatabasesDbNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabasesDbNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabasesDbNameJoinTablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseInfo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesDbNameJoinTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesDbNameJoinTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabasesDbNameJoinedTablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Table
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesDbNameJoinedTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesDbNameJoinedTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabasesDbNameTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabasesDbNameTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabasesDbNameTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabasesDbNameTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Table
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesDbNameTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesDbNameTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDatabasesDbNameTableNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostDatabasesDbNameTableNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDatabasesDbNameTableNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabasesDbNameTableNameRowIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabasesDbNameTableNameRowIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabasesDbNameTableNameRowIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDatabasesDbNameTableNameRowIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutDatabasesDbNameTableNameRowIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDatabasesDbNameTableNameRowIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDatabasesWithResponse request returning *GetDatabasesResponse
func (c *ClientWithResponses) GetDatabasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDatabasesResponse, error) {
	rsp, err := c.GetDatabases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabasesResponse(rsp)
}

// PostDatabasesWithBodyWithResponse request with arbitrary body returning *PostDatabasesResponse
func (c *ClientWithResponses) PostDatabasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesResponse, error) {
	rsp, err := c.PostDatabasesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesResponse(rsp)
}

func (c *ClientWithResponses) PostDatabasesWithResponse(ctx context.Context, body PostDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesResponse, error) {
	rsp, err := c.PostDatabases(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesResponse(rsp)
}

// DeleteDatabasesDbNameWithResponse request returning *DeleteDatabasesDbNameResponse
func (c *ClientWithResponses) DeleteDatabasesDbNameWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameResponse, error) {
	rsp, err := c.DeleteDatabasesDbName(ctx, dbName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabasesDbNameResponse(rsp)
}

// GetDatabasesDbNameWithResponse request returning *GetDatabasesDbNameResponse
func (c *ClientWithResponses) GetDatabasesDbNameWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameResponse, error) {
	rsp, err := c.GetDatabasesDbName(ctx, dbName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabasesDbNameResponse(rsp)
}

// PostDatabasesDbNameWithBodyWithResponse request with arbitrary body returning *PostDatabasesDbNameResponse
func (c *ClientWithResponses) PostDatabasesDbNameWithBodyWithResponse(ctx context.Context, dbName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameResponse, error) {
	rsp, err := c.PostDatabasesDbNameWithBody(ctx, dbName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesDbNameResponse(rsp)
}

func (c *ClientWithResponses) PostDatabasesDbNameWithResponse(ctx context.Context, dbName string, body PostDatabasesDbNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameResponse, error) {
	rsp, err := c.PostDatabasesDbName(ctx, dbName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesDbNameResponse(rsp)
}

// GetDatabasesDbNameJoinTablesWithResponse request returning *GetDatabasesDbNameJoinTablesResponse
func (c *ClientWithResponses) GetDatabasesDbNameJoinTablesWithResponse(ctx context.Context, dbName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameJoinTablesResponse, error) {
	rsp, err := c.GetDatabasesDbNameJoinTables(ctx, dbName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabasesDbNameJoinTablesResponse(rsp)
}

// GetDatabasesDbNameJoinedTablesWithResponse request returning *GetDatabasesDbNameJoinedTablesResponse
func (c *ClientWithResponses) GetDatabasesDbNameJoinedTablesWithResponse(ctx context.Context, dbName string, params *GetDatabasesDbNameJoinedTablesParams, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameJoinedTablesResponse, error) {
	rsp, err := c.GetDatabasesDbNameJoinedTables(ctx, dbName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabasesDbNameJoinedTablesResponse(rsp)
}

// DeleteDatabasesDbNameTableNameWithResponse request returning *DeleteDatabasesDbNameTableNameResponse
func (c *ClientWithResponses) DeleteDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameTableNameResponse, error) {
	rsp, err := c.DeleteDatabasesDbNameTableName(ctx, dbName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabasesDbNameTableNameResponse(rsp)
}

// GetDatabasesDbNameTableNameWithResponse request returning *GetDatabasesDbNameTableNameResponse
func (c *ClientWithResponses) GetDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, reqEditors ...RequestEditorFn) (*GetDatabasesDbNameTableNameResponse, error) {
	rsp, err := c.GetDatabasesDbNameTableName(ctx, dbName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabasesDbNameTableNameResponse(rsp)
}

// PostDatabasesDbNameTableNameWithBodyWithResponse request with arbitrary body returning *PostDatabasesDbNameTableNameResponse
func (c *ClientWithResponses) PostDatabasesDbNameTableNameWithBodyWithResponse(ctx context.Context, dbName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameTableNameResponse, error) {
	rsp, err := c.PostDatabasesDbNameTableNameWithBody(ctx, dbName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesDbNameTableNameResponse(rsp)
}

func (c *ClientWithResponses) PostDatabasesDbNameTableNameWithResponse(ctx context.Context, dbName string, tableName string, body PostDatabasesDbNameTableNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDatabasesDbNameTableNameResponse, error) {
	rsp, err := c.PostDatabasesDbNameTableName(ctx, dbName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDatabasesDbNameTableNameResponse(rsp)
}

// DeleteDatabasesDbNameTableNameRowIdWithResponse request returning *DeleteDatabasesDbNameTableNameRowIdResponse
func (c *ClientWithResponses) DeleteDatabasesDbNameTableNameRowIdWithResponse(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*DeleteDatabasesDbNameTableNameRowIdResponse, error) {
	rsp, err := c.DeleteDatabasesDbNameTableNameRowId(ctx, dbName, tableName, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabasesDbNameTableNameRowIdResponse(rsp)
}

// PutDatabasesDbNameTableNameRowIdWithResponse request returning *PutDatabasesDbNameTableNameRowIdResponse
func (c *ClientWithResponses) PutDatabasesDbNameTableNameRowIdWithResponse(ctx context.Context, dbName string, tableName string, rowId int, reqEditors ...RequestEditorFn) (*PutDatabasesDbNameTableNameRowIdResponse, error) {
	rsp, err := c.PutDatabasesDbNameTableNameRowId(ctx, dbName, tableName, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDatabasesDbNameTableNameRowIdResponse(rsp)
}

// ParseGetDatabasesResponse parses an HTTP response from a GetDatabasesWithResponse call
func ParseGetDatabasesResponse(rsp *http.Response) (*GetDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDatabasesResponse parses an HTTP response from a PostDatabasesWithResponse call
func ParsePostDatabasesResponse(rsp *http.Response) (*PostDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDatabasesDbNameResponse parses an HTTP response from a DeleteDatabasesDbNameWithResponse call
func ParseDeleteDatabasesDbNameResponse(rsp *http.Response) (*DeleteDatabasesDbNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabasesDbNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDatabasesDbNameResponse parses an HTTP response from a GetDatabasesDbNameWithResponse call
func ParseGetDatabasesDbNameResponse(rsp *http.Response) (*GetDatabasesDbNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesDbNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDatabasesDbNameResponse parses an HTTP response from a PostDatabasesDbNameWithResponse call
func ParsePostDatabasesDbNameResponse(rsp *http.Response) (*PostDatabasesDbNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabasesDbNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDatabasesDbNameJoinTablesResponse parses an HTTP response from a GetDatabasesDbNameJoinTablesWithResponse call
func ParseGetDatabasesDbNameJoinTablesResponse(rsp *http.Response) (*GetDatabasesDbNameJoinTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesDbNameJoinTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDatabasesDbNameJoinedTablesResponse parses an HTTP response from a GetDatabasesDbNameJoinedTablesWithResponse call
func ParseGetDatabasesDbNameJoinedTablesResponse(rsp *http.Response) (*GetDatabasesDbNameJoinedTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesDbNameJoinedTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDatabasesDbNameTableNameResponse parses an HTTP response from a DeleteDatabasesDbNameTableNameWithResponse call
func ParseDeleteDatabasesDbNameTableNameResponse(rsp *http.Response) (*DeleteDatabasesDbNameTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabasesDbNameTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDatabasesDbNameTableNameResponse parses an HTTP response from a GetDatabasesDbNameTableNameWithResponse call
func ParseGetDatabasesDbNameTableNameResponse(rsp *http.Response) (*GetDatabasesDbNameTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesDbNameTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDatabasesDbNameTableNameResponse parses an HTTP response from a PostDatabasesDbNameTableNameWithResponse call
func ParsePostDatabasesDbNameTableNameResponse(rsp *http.Response) (*PostDatabasesDbNameTableNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDatabasesDbNameTableNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteDatabasesDbNameTableNameRowIdResponse parses an HTTP response from a DeleteDatabasesDbNameTableNameRowIdWithResponse call
func ParseDeleteDatabasesDbNameTableNameRowIdResponse(rsp *http.Response) (*DeleteDatabasesDbNameTableNameRowIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabasesDbNameTableNameRowIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutDatabasesDbNameTableNameRowIdResponse parses an HTTP response from a PutDatabasesDbNameTableNameRowIdWithResponse call
func ParsePutDatabasesDbNameTableNameRowIdResponse(rsp *http.Response) (*PutDatabasesDbNameTableNameRowIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDatabasesDbNameTableNameRowIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
